package ;
import DummyJSMain;
import zpp_nape.Const;
import zpp_nape.ID;
import zpp_nape.util.Array2;
import zpp_nape.util.Circular;
import zpp_nape.util.DisjointSetForest;
import zpp_nape.util.FastHash;
import zpp_nape.util.Flags;
import zpp_nape.util.Lists;
import zpp_nape.util.Debug;
import zpp_nape.util.Math;
import zpp_nape.util.Names;
import zpp_nape.util.Pool;
import zpp_nape.util.Queue;
import zpp_nape.util.UserData;
import zpp_nape.util.RBTree;
import zpp_nape.space.Broadphase;
import zpp_nape.util.WrapLists;
import zpp_nape.space.DynAABBPhase;
import zpp_nape.space.SweepPhase;
import zpp_nape.shape.Circle;
import zpp_nape.shape.Edge;
import zpp_nape.space.Space;
import zpp_nape.shape.Polygon;
import zpp_nape.shape.Shape;
import zpp_nape.phys.Compound;
import zpp_nape.phys.FeatureMix;
import zpp_nape.phys.FluidProperties;
import zpp_nape.phys.Interactor;
import zpp_nape.phys.Body;
import zpp_nape.phys.Material;
import zpp_nape.geom.AABB;
import zpp_nape.geom.Convex;
import zpp_nape.geom.ConvexRayResult;
import zpp_nape.geom.Cutter;
import zpp_nape.geom.Geom;
import zpp_nape.geom.Collide;
import zpp_nape.geom.GeomPoly;
import zpp_nape.geom.MarchingSquares;
import zpp_nape.geom.Mat23;
import zpp_nape.geom.MatMN;
import zpp_nape.geom.Monotone;
import zpp_nape.geom.MatMath;
import zpp_nape.geom.PolyIter;
import zpp_nape.geom.PartitionedPoly;
import zpp_nape.geom.Ray;
import zpp_nape.geom.Simplify;
import zpp_nape.geom.Simple;
import zpp_nape.geom.Triangular;
import zpp_nape.geom.Vec2;
import zpp_nape.geom.Vec3;
import zpp_nape.geom.VecMath;
import zpp_nape.geom.SweepDistance;
import zpp_nape.dynamics.Contact;
import zpp_nape.dynamics.InteractionFilter;
import zpp_nape.dynamics.InteractionGroup;
import zpp_nape.dynamics.SpaceArbiterList;
import zpp_nape.constraint.AngleJoint;
import zpp_nape.dynamics.Arbiter;
import zpp_nape.constraint.Constraint;
import zpp_nape.constraint.LinearJoint;
import zpp_nape.constraint.DistanceJoint;
import zpp_nape.constraint.LineJoint;
import zpp_nape.constraint.MotorJoint;
import zpp_nape.constraint.PivotJoint;
import zpp_nape.constraint.UserConstraint;
import zpp_nape.constraint.PulleyJoint;
import zpp_nape.callbacks.Callback;
import zpp_nape.constraint.WeldJoint;
import zpp_nape.callbacks.CbSet;
import zpp_nape.callbacks.CbSetPair;
import zpp_nape.callbacks.CbType;
import zpp_nape.callbacks.Listener;
import zpp_nape.callbacks.OptionType;
import nape.Config;
import nape.TArray;
import nape.util.Debug;
import nape.util.BitmapDebug;
import nape.space.Broadphase;
import nape.util.ShapeDebug;
import nape.shape.Circle;
import nape.space.Space;
import nape.shape.EdgeIterator;
import nape.shape.EdgeList;
import nape.shape.Polygon;
import nape.shape.Edge;
import nape.shape.Shape;
import nape.shape.ShapeIterator;
import nape.shape.ShapeType;
import nape.shape.ShapeList;
import nape.shape.ValidationResult;
import nape.phys.BodyIterator;
import nape.phys.BodyList;
import nape.phys.BodyType;
import nape.phys.Compound;
import nape.phys.CompoundIterator;
import nape.phys.CompoundList;
import nape.phys.FluidProperties;
import nape.phys.GravMassMode;
import nape.phys.InertiaMode;
import nape.phys.Interactor;
import nape.phys.InteractorIterator;
import nape.phys.InteractorList;
import nape.phys.MassMode;
import nape.phys.Body;
import nape.phys.Material;
import nape.geom.ConvexResult;
import nape.geom.ConvexResultIterator;
import nape.geom.ConvexResultList;
import nape.geom.AABB;
import nape.geom.GeomPoly;
import nape.geom.GeomPolyIterator;
import nape.geom.Geom;
import nape.geom.GeomPolyList;
import nape.geom.IsoFunction;
import nape.geom.GeomVertexIterator;
import nape.geom.MarchingSquares;
import nape.geom.MatMN;
import nape.geom.Mat23;
import nape.geom.Ray;
import nape.geom.RayResultIterator;
import nape.geom.RayResultList;
import nape.geom.RayResult;
import nape.geom.Vec2Iterator;
import nape.geom.Vec2List;
import nape.geom.Vec2;
import nape.geom.Winding;
import nape.geom.Vec3;
import nape.dynamics.Arbiter;
import nape.dynamics.ArbiterIterator;
import nape.dynamics.ArbiterList;
import nape.dynamics.ArbiterType;
import nape.dynamics.CollisionArbiter;
import nape.dynamics.ContactIterator;
import nape.dynamics.ContactList;
import nape.dynamics.FluidArbiter;
import nape.dynamics.Contact;
import nape.dynamics.InteractionFilter;
import nape.dynamics.InteractionGroupIterator;
import nape.dynamics.InteractionGroupList;
import nape.dynamics.InteractionGroup;
import nape.constraint.AngleJoint;
import nape.constraint.ConstraintIterator;
import nape.constraint.ConstraintList;
import nape.constraint.Constraint;
import nape.constraint.DistanceJoint;
import nape.constraint.LinearJoint;
import nape.constraint.MotorJoint;
import nape.constraint.LineJoint;
import nape.constraint.PivotJoint;
import nape.constraint.PulleyJoint;
import nape.constraint.WeldJoint;
import nape.callbacks.BodyCallback;
import nape.callbacks.BodyListener;
import nape.callbacks.Callback;
import nape.callbacks.CbEvent;
import nape.callbacks.CbType;
import nape.callbacks.CbTypeIterator;
import nape.constraint.UserConstraint;
import nape.callbacks.CbTypeList;
import nape.callbacks.ConstraintCallback;
import nape.callbacks.InteractionCallback;
import nape.callbacks.ConstraintListener;
import nape.callbacks.InteractionListener;
import nape.callbacks.InteractionType;
import nape.callbacks.Listener;
import nape.callbacks.ListenerIterator;
import nape.callbacks.ListenerList;
import nape.callbacks.ListenerType;
import nape.callbacks.OptionType;
import nape.callbacks.PreCallback;
import nape.callbacks.PreFlag;
import nape.callbacks.PreListener;
#if nape_swc@:keep #end
class DummyCppMain{
    static function main(){
        var w=800;
        var h=600;
        var fps=200;
        var bgColor=0x333333;
        var flags=nme.Lib.BORDERLESS|nme.Lib.HARDWARE|nme.Lib.VSYNC|0;
        var name="Nape";
        nme.Lib.create(function(){
            new DummyCppMain();
        },
        w,h,fps,bgColor,flags,name);
    }
    function new(){
        var cur=flash.Lib.current;
        var stage=cur.stage;
        var debug=new ShapeDebug(800,600,0x333333);
        debug.drawShapeAngleIndicators=false;
        cur.addChild(debug.display);
        var space=new Space(new Vec2(0,400));
        var border=new Body(BodyType.STATIC);
        border.shapes.add(new Polygon(Polygon.rect(0,0,-50,stage.stageHeight)));
        border.shapes.add(new Polygon(Polygon.rect(stage.stageWidth,0,50,stage.stageHeight)));
        border.shapes.add(new Polygon(Polygon.rect(0,0,stage.stageWidth,-50)));
        border.shapes.add(new Polygon(Polygon.rect(0,stage.stageHeight,stage.stageWidth,50)));
        border.space=space;
        var boxw=6;
        var boxh=12;
        var height=40;
        for(y in 1...(height+1)){
            for(x in 0...y){
                var block=new Body();
                block.position.x=stage.stageWidth/2-boxw*(y-1)/2+x*boxw;
                block.position.y=stage.stageHeight-boxh/2-boxh*(height-y)*0.98;
                block.shapes.add(new Polygon(Polygon.box(boxw,boxh)));
                block.space=space;
            }
        }
        var hand=new PivotJoint(space.world,null,new Vec2(),new Vec2());
        hand.active=false;
        hand.stiff=false;
        hand.space=space;
        stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN,function(_){
            var mp=new Vec2(cur.mouseX,cur.mouseY);
            for(b in space.bodiesUnderPoint(mp)){
                if(!b.isDynamic())continue;
                hand.body2=b;
                hand.anchor2=b.worldPointToLocal(mp);
                hand.active=true;
                break;
            }
        });
        stage.addEventListener(flash.events.MouseEvent.MOUSE_UP,function(_){
            hand.active=false;
        });
        var txt=new flash.text.TextField();
        txt.defaultTextFormat=new flash.text.TextFormat(null,14,0xffffff);
        cur.addChild(txt);
        var fps=-1.0;
        var pt=flash.Lib.getTimer();
        cur.addEventListener(flash.events.Event.ENTER_FRAME,function(_){
            var ct=flash.Lib.getTimer();
            var nfps=1000/(ct-pt);
            fps=if(fps==-1.0)nfps else fps*0.95+nfps*0.05;
            pt=ct;
            txt.text=Std.string(fps).substr(0,5)+"fps";
            var dt=({
                var x=1/40;
                var y=1/200+space.timeStamp*1e-5*30;
                x<y?x:y;
            });
            hand.anchor1.setxy(cur.mouseX,cur.mouseY);
            debug.clear();
            space.step(dt,8,8);
            debug.draw(space);
            debug.flush();
        });
    }
}
